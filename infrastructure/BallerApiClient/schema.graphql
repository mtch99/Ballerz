type Blog @model {
  id: ID!
  name: String!
  posts: [Post] @connection(keyName: "byBlog", fields: ["id"])
}

type Post @model @key(name: "byBlog", fields: ["blogID"]) {
  id: ID!
  title: String!
  blogID: ID!
  blog: Blog @connection(fields: ["blogID"])
  comments: [Comment] @connection(keyName: "byPost", fields: ["id"])
}

type Comment @model @key(name: "byPost", fields: ["postID", "content"]) {
  id: ID!
  postID: ID!
  post: Post @connection(fields: ["postID"])
  content: String!
}



type UserDoc @model @auth(rules: [{allow: private}, { allow: public, provider: apiKey }]){
  id: ID!
  profileID: ID
  email: String!
  deviceToken: String
  phoneNumber: String
  uProfile: Uprofile @connection(fields: ["profileID"])
}


type Uprofile  @model @auth(rules: [{allow: private}, { allow: public, provider: apiKey }])
@key(name: "byUser", fields: ["username"])
@key(name: "byPlace", fields:["currentPlaceID"]){
  id:ID!
  username: String!
  name: String
  userDocID: ID!
  currentPlaceID: ID
  sentNotifications: [Notification] @connection(keyName: "bySender", fields: ["id"])
  notifications: [Notification] @connection(keyName: "byReceiver", fields:["id"])
  expoPushToken: String
  # myEvents: [UserEventConnection] @connection(keyName: "byUser", fields:["id"])
  # eventsCreated: [Event] @connection(keyName: "byCreator", fields:["id"])
  # followers: [UserConnection] @connection(keyName: "followers", fields:["id"])
  # following: [UserConnection] @connection(keyName: "following", fields:["id"])
  currentPlace: Place @connection(fields:["currentPlaceID"])
  friends: [FriendConnection] @connection(keyName: "byUser", fields:["id"])
  userDoc: UserDoc @connection(fields:["userDocID"])
  placeTimeSlots: [PlaceTimeSlotUserPlaceConnection] @connection(keyName: "byUser", fields: ["id"])
  attendings: [UserPlaceConnection] @connection(keyName: "byUser", fields:["id"])
}


# type UserConnection @model @auth(rules: [{allow: private}, { allow: public, provider: apiKey }])
# @key(name: "following", fields:["followerID", "createdAt"])
# @key(name: "followers", fields:["followedID", "createdAt"]){
#   id: ID!
#   followerID: ID!
#   followedID: ID!
#   follower: Uprofile @connection(fields: ["followerID"])
#   followed: Uprofile @connection(fields: ["followedID"])
#   createdAt: AWSDateTime
# }


type UserPlaceConnection @model @auth(rules: [{allow: private}, { allow: public, provider: apiKey }])
@key(name: "byPlace", fields:["placeID", "arrivingTime"])
@key(name:"byUser", fields:["profileID", "arrivingTime"]){
  id: ID!
  profileID: ID!
  placeID: ID!
  arrivingTime: AWSDateTime
  departureTime: AWSDateTime
  uProfile: Uprofile @connection(fields: ["profileID"])
  place: Place @connection(fields: ["placeID"])
  placeTimeSoltUserPlaceConnection: Place
}


type MyDate {
  weekDay: String!
  monthDay: String!
  month: String!
  year: String!
}


type PlaceTimeSlot @model @auth(rules: [{allow: private}, { allow: public, provider: apiKey }])
@key(name: "byPlace", fields:["placeID", "numAttendings"]){
  id: ID!
  numAttendings: Int
  myDate: MyDate
  dateTime: AWSDateTime
  placeID: ID!
  startingHour: String!
  endingHour: String!
  attendings: [PlaceTimeSlotUserPlaceConnection] @connection(keyName: "byPlaceTimeSlot", fields:["id"])
  place: Place @connection(fields: ["placeID"])
}


type PlaceTimeSlotUserPlaceConnection @model @auth(rules: [{allow: private}, { allow: public, provider: apiKey }])
@key(name: "byPlaceTimeSlot", fields:["placeTimeSlotID", "createdAt"])
@key(name: "byUser", fields:["profileID", "createdAt"])
{ 
  id: ID!
  attendingID: ID!
  profileID: ID
  placeTimeSlotID: ID!
  attending: UserPlaceConnection @connection(fields: ["attendingID"])
  uProfile: Uprofile @connection(fields: ["profileID"])
  timeSlot: PlaceTimeSlot @connection(fields: ["placeTimeSlotID"])
  createdAt: AWSDateTime
}


type Place @model @auth(rules: [{allow: private}, { allow: public, provider: apiKey }]){
  id: ID!
  name: String!
  address: String!
  coords: Coords!
  # events: [Event] @connection(keyName: "byPlace", fields:["id"])
  currentPlayers: [Uprofile] @connection(keyName: "byPlace", fields:["id"])
  timeSlots: [PlaceTimeSlot] @connection(keyName: "byPlace", fields:["id"])
}


type FriendConnection @model @auth(rules: [{allow: private}, { allow: public, provider: apiKey }])
@key(name:"byUser", fields:["userProfileID"]){
  id: ID!
  userProfileID: ID!
  friendProfileID: ID!
  friendProfile: Uprofile @connection(fields: ["friendProfileID"])
}


# type UserEventConnection @model @auth(rules: [{allow: private}, { allow: public, provider: apiKey }])
# @key(name: "byUser", fields:["profileID", "createdAt"])
# @key(name:"byEvent", fields:["eventID", "createdAt"]){
#   id: ID!
#   eventID: ID!
#   profileID : ID!
#   Event: Event ! @connection(fields: ["eventID"])
#   userProfile: Uprofile @connection(fields:["profileID"])
#   createdAt: AWSDateTime
# }


# type Event @model @auth(rules: [{allow: private}, { allow: public, provider: apiKey }])
# @key(name: "byPlace", fields:["placeID", "beginningTime"])
# @key(name:"byEvent", fields:["id", "beginningTime"], queryField:"listEvents_o")
# @key(name:"byCreator", fields:["creatorID", "beginningTime"]){
#   id: ID!
#   name: String!
#   placeID: ID!
#   creatorID: ID!
#   place: Place @connection(fields: ["placeID"])
#   beginningTime: AWSDateTime!
#   endingTime: AWSDateTime!
#   tags: [String]
#   creator: Uprofile! @connection(fields: ["creatorID"])
#   participants: [UserEventConnection] @connection(keyName: "byEvent", fields:["id"])
#   chat: [EventChatMessage] @connection(keyName: "byEvent", fields:["id"])
#   description: String!
#   profilePic: AWSURL
#   eventPictures: [AWSURL]
#   eventVideos: [AWSURL]
# }

# type EventChatMessage @model @auth(rules: [{allow: private}, { allow: public, provider: apiKey }])
# @key(name: "byEvent", fields:["eventID", "createdAt"]){
#   id: ID!
#   body: String!
#   profileID: ID!
#   eventID: ID!
#   createdAt: AWSDateTime
#   event: Event @connection(fields:["eventID"])
#   userProfile: Uprofile @connection(fields:["profileID"])
# }



type Notification @model  @auth(rules: [{allow: private}, { allow: public, provider: apiKey }])
@key(name: "byReceiver", fields:["receiverProfileID", "createdAt"])
@key(name: "bySender", fields:["receiverProfileID", "createdAt"]){
  id: ID!
  placeID: ID
  placeName: String
  arrivingTime: AWSDateTime
  departureTime: AWSDateTime
  senderProfileID: ID!
  message: String!
  receiverProfileID: ID!
  photo: AWSURL
  createdAt: AWSDateTime
  type: NotifType!
  status: Status!
  userProfile: Uprofile @connection(fields: ["receiverProfileID"])
  senderProfile: Uprofile @connection(fields: ["senderProfileID"])
  placeTimeSlotID: ID
  placeTimeSlot: PlaceTimeSlot @connection(fields: ["placeTimeSlotID"])
}



type PushNotificationsBatch @model  @auth(rules: [{allow: private}, { allow: public, provider: apiKey }]){
  id: ID!
  payloadsList: String
}


type Mutation  {
  # friendRequest(senderProfileID: String, receiverProfileID: String): Notification @function(name: "NotifResolver-${env}")
  createAttendance(arrivingTime: AWSDateTime!, departureTime: AWSDateTime, placeID: String!, profileID: String!): PlaceTimeSlotUserPlaceConnection @auth(rules: [{allow: private}, { allow: public, provider: apiKey }]) @function(name: "ActivityResolver-${env}")
  deleteAttendance(id: ID!): Boolean @function(name: "ActivityResolver-${env}")
}

type Subscription {
  onNewMyAttendance(profileID: ID!): UserPlaceConnection @aws_subscribe(mutations: ["createUserPlaceConnection"])
  onUpdateMyProfile(id: ID!): Uprofile @aws_subscribe(mutations: ["updateUprofile"])
  onNewMyNotification(receiverProfileID: ID!): Notification @aws_subscribe(mutations: ["createNotification"])
}


type Coords{
  lon: Float!
  lat: Float!
}


enum NotifType{
  newFriend
  friendRequest
  eventInvitation
  friendPlaying
  hotCourt
  casualInvitation
  friendJoining
  playersJoining
}

enum Status{
  noStatus
  pending
  accepted
  refused
}


type PushNotifications @model  @auth(rules: [{allow: private}, { allow: public, provider: apiKey }]){
  id: ID,
  body: String!
  userTokens: String!
  data: String!
  type: NotifType
}

